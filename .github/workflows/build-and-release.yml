name: Build and Release Electron App

on:
  push:
    tags:
      - "v*"

jobs:
  setup-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-mac:
    needs: setup-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install
      - name: Extract version number
        id: version
        run: |
          VERSION=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Build and package macOS
        run: |
          export GH_TOKEN=${{ secrets.GITHUB_TOKEN }}
          npm run package-mac
      - name: List output in dist directory
        run: ls -l dist/
      - name: Upload macOS Installer
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup-release.outputs.upload_url }}
          asset_path: ./dist/ME3040_F24-${{ env.VERSION }}-darwin64.dmg
          asset_name: ME3040_F24-${{ env.VERSION }}-darwin64.dmg
          asset_content_type: application/octet-stream

  build-win:
    needs: setup-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm install
      - name: Set GH_TOKEN for Windows
        run: |
          $env:GH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
          npm run package-win
        shell: pwsh
      - name: Extract package version
        run: |
          $version = (Get-Content package.json -Raw | ConvertFrom-Json).version
          echo "VERSION=$version" >> $env:GITHUB_ENV
        shell: pwsh
      - name: Print extracted version
        run: echo "Extracted version is ${{ env.VERSION }}"
        shell: pwsh
      - name: List output in dist directory
        run: dir dist
      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.setup-release.outputs.upload_url }}
          asset_path: ./dist/ME3040_F24-${{ env.VERSION }}-win64.exe
          asset_name: ME3040_F24-${{ env.VERSION }}-win64.exe
          asset_content_type: application/vnd.microsoft.portable-executable
